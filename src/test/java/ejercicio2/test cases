1 Enero 2020  23 59 59
1 Febrero 2020  23 59 59
1 Marzo 2020  23 59 59
1 Abril 2020  23 59 59
1 Mayo 2020  23 59 59
1 Junio 2020  23 59 59
1 Julio 2020  23 59 59
1 Agosto 2020  23 59 59
1 Septiembre 2020  23 59 59
1 Octubre 2020  23 59 59
1 Noviembre 2020  23 59 59
1 Diciembre 2020  23 59 59
31 Enero 2020  23 59 59
28 Febrero 2021  23 59 59
29 Febrero 2020  23 59 59 ---- bisiesto
31 Marzo 2020  23 59 59
30 Abril 2020  23 59 59
31 Mayo 2020  23 59 59
30 Junio 2020  23 59 59
31 Julio 2020  23 59 59
31 Agosto 2020  23 59 59
30 Septiembre 2020  23 59 59
31 Octubre 2020  23 59 59
30 Noviembre 2020  23 59 59
31 Diciembre 2020  23 59 59

20 Febrero -1 23 59 59 - Invalid Year
31 Febrero 2020  23 59 59 - Invalid Day
31 Diciembres 2020  23 59 59 - Invalid Month

31 Diciembre 2020  -1 59 59  ---- Invalid Hour
31 Diciembre 2020  00 59 59
31 Diciembre 2020  01 59 59
31 Diciembre 2020  11 59 59
31 Diciembre 2020  12 59 59
31 Diciembre 2020  13 59 59
31 Diciembre 2020  22 59 59
31 Diciembre 2020  23 59 59
31 Diciembre 2020  24 59 59 ---- Invalid Hour

31 Diciembre 2020  01 -1 59 ---- Invalid Minute
31 Diciembre 2020  01 00 59
31 Diciembre 2020  01 1 59
31 Diciembre 2020  01 29 59
31 Diciembre 2020  01 30 59
31 Diciembre 2020  01 31 59
31 Diciembre 2020  01 58 59
31 Diciembre 2020  01 59 59
31 Diciembre 2020  01 60 59 ---- Invalid Minute

31 Diciembre 2020  01 01 -1 ---- Invalid Second
31 Diciembre 2020  01 01 00
31 Diciembre 2020  01 01 01
31 Diciembre 2020  01 01 29
31 Diciembre 2020  01 01 30
31 Diciembre 2020  01 01 31
31 Diciembre 2020  01 01 58
31 Diciembre 2020  01 01 59
31 Diciembre 2020  01 01 60 ---- Invalid Second

**39 Dragon -1000  25:69:80  ----> Invalid Day

***************************************************

testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-api-easymock', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-classloading-xstream', version: '2.0.9'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.7.7'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'

***************************************************

package calculadoraMock;

public class BasicCalculadoraService {

    public int multi(int a, int b){
        //todo
        return 0;
    }
}


*********************************


package calculadoraMock;

public class CalculadoraMock {

     BasicCalculadoraService service = new BasicCalculadoraService();

     public CalculadoraMock(){

     }


     public int factorial(int n){
         int fact=1;

         for (int i = 1; i <= n  ; i++) {
             fact=this.service.multi(fact,i);
         }

          return fact;
     }

}

***********************************

package calculadotaPowerMockito;

public class CalculadoraPowerMock {

     public CalculadoraPowerMock(){
      }

     public int factorial(int n){
         int fact=1;

         for (int i = 1; i <= n  ; i++) {
             fact=HelperCalculadoraService.multi(fact,i);
         }
          return fact;
     }

}

********************************

package calculadotaPowerMockito;

public class HelperCalculadoraService {

    public static int multi(int a, int b){
        //todo
        return -1;
    }
}


***********************************

package calculadoraPowerMockito;

import calculadotaPowerMockito.CalculadoraPowerMock;
import calculadotaPowerMockito.HelperCalculadoraService;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

//Paso 1 para metodos estaticos
@RunWith(PowerMockRunner.class)
//Paso 2 para metodos estaticos
@PrepareForTest(HelperCalculadoraService.class)
public class CalculadoraPowerMockTest {

    @Test
    public void verify_calculadora_power_mock(){
        PowerMockito.mockStatic(HelperCalculadoraService.class);
        Mockito.when(HelperCalculadoraService.multi(1,1)).thenReturn(1);
        Mockito.when(HelperCalculadoraService.multi(1,2)).thenReturn(2);
        Mockito.when(HelperCalculadoraService.multi(2,3)).thenReturn(6);

        CalculadoraPowerMock calculadora = new CalculadoraPowerMock();

        int expectedResult=6;
        int actualResult= calculadora.factorial(3);
        Assert.assertEquals("ERROR en factorial!",expectedResult,actualResult);

    }

}

